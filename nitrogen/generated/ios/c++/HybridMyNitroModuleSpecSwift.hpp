///
/// HybridMyNitroModuleSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridMyNitroModuleSpec.hpp"

// Forward declaration of `HybridMyNitroModuleSpec_cxx` to properly resolve imports.
namespace MyNitroModule { class HybridMyNitroModuleSpec_cxx; }

// Forward declaration of `DeviceInfo` to properly resolve imports.
namespace margelo::nitro::mynitromodule { struct DeviceInfo; }

#include <string>
#include <vector>
#include "DeviceInfo.hpp"
#include <NitroModules/Promise.hpp>

#include "MyNitroModule-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::mynitromodule {

  /**
   * The C++ part of HybridMyNitroModuleSpec_cxx.swift.
   *
   * HybridMyNitroModuleSpecSwift (C++) accesses HybridMyNitroModuleSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridMyNitroModuleSpec_cxx can directly inherit from the C++ class HybridMyNitroModuleSpec
   * to simplify the whole structure and memory management.
   */
  class HybridMyNitroModuleSpecSwift: public virtual HybridMyNitroModuleSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridMyNitroModuleSpecSwift(const MyNitroModule::HybridMyNitroModuleSpec_cxx& swiftPart):
      HybridObject(HybridMyNitroModuleSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline MyNitroModule::HybridMyNitroModuleSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline double sum(double num1, double num2) override {
      auto __result = _swiftPart.sum(std::forward<decltype(num1)>(num1), std::forward<decltype(num2)>(num2));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline double multiply(double num1, double num2) override {
      auto __result = _swiftPart.multiply(std::forward<decltype(num1)>(num1), std::forward<decltype(num2)>(num2));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::string greet(const std::string& name) override {
      auto __result = _swiftPart.greet(name);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::string reverseString(const std::string& input) override {
      auto __result = _swiftPart.reverseString(input);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline double getArraySum(const std::vector<double>& numbers) override {
      auto __result = _swiftPart.getArraySum(numbers);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline DeviceInfo getDeviceInfo() override {
      auto __result = _swiftPart.getDeviceInfo();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> delayedGreeting(const std::string& name, double delayMs) override {
      auto __result = _swiftPart.delayedGreeting(name, std::forward<decltype(delayMs)>(delayMs));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline bool isEven(double number) override {
      auto __result = _swiftPart.isEven(std::forward<decltype(number)>(number));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    MyNitroModule::HybridMyNitroModuleSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::mynitromodule
