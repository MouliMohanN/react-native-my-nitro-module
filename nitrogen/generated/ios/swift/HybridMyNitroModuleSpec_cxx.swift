///
/// HybridMyNitroModuleSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridMyNitroModuleSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
open class HybridMyNitroModuleSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::mynitromodule::bridge::swift`)
   * from `MyNitroModule-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.mynitromodule.bridge.swift

  /**
   * Holds an instance of the `HybridMyNitroModuleSpec` Swift protocol.
   */
  private var __implementation: any HybridMyNitroModuleSpec

  /**
   * Holds a weak pointer to the C++ class that wraps the Swift class.
   */
  private var __cxxPart: bridge.std__weak_ptr_HybridMyNitroModuleSpec_

  /**
   * Create a new `HybridMyNitroModuleSpec_cxx` that wraps the given `HybridMyNitroModuleSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: any HybridMyNitroModuleSpec) {
    self.__implementation = implementation
    self.__cxxPart = .init()
    /* no base class */
  }

  /**
   * Get the actual `HybridMyNitroModuleSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridMyNitroModuleSpec() -> any HybridMyNitroModuleSpec {
    return __implementation
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridMyNitroModuleSpec_cxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridMyNitroModuleSpec_cxx>`.
   * This removes one strong reference from the object!
   */
  public class func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridMyNitroModuleSpec_cxx {
    return Unmanaged<HybridMyNitroModuleSpec_cxx>.fromOpaque(pointer).takeRetainedValue()
  }

  /**
   * Gets (or creates) the C++ part of this Hybrid Object.
   * The C++ part is a `std::shared_ptr<HybridMyNitroModuleSpec>`.
   */
  public func getCxxPart() -> bridge.std__shared_ptr_HybridMyNitroModuleSpec_ {
    let cachedCxxPart = self.__cxxPart.lock()
    if cachedCxxPart.__convertToBool() {
      return cachedCxxPart
    } else {
      let newCxxPart = bridge.create_std__shared_ptr_HybridMyNitroModuleSpec_(self.toUnsafe())
      __cxxPart = bridge.weakify_std__shared_ptr_HybridMyNitroModuleSpec_(newCxxPart)
      return newCxxPart
    }
  }

  

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return MemoryHelper.getSizeOf(self.__implementation) + self.__implementation.memorySize
  }

  /**
   * Call dispose() on the Swift class.
   * This _may_ be called manually from JS.
   */
  @inline(__always)
  public func dispose() {
    self.__implementation.dispose()
  }

  // Properties
  

  // Methods
  @inline(__always)
  public final func sum(num1: Double, num2: Double) -> bridge.Result_double_ {
    do {
      let __result = try self.__implementation.sum(num1: num1, num2: num2)
      let __resultCpp = __result
      return bridge.create_Result_double_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_double_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func multiply(num1: Double, num2: Double) -> bridge.Result_double_ {
    do {
      let __result = try self.__implementation.multiply(num1: num1, num2: num2)
      let __resultCpp = __result
      return bridge.create_Result_double_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_double_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func greet(name: std.string) -> bridge.Result_std__string_ {
    do {
      let __result = try self.__implementation.greet(name: String(name))
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func reverseString(input: std.string) -> bridge.Result_std__string_ {
    do {
      let __result = try self.__implementation.reverseString(input: String(input))
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getArraySum(numbers: bridge.std__vector_double_) -> bridge.Result_double_ {
    do {
      let __result = try self.__implementation.getArraySum(numbers: numbers.map({ __item in __item }))
      let __resultCpp = __result
      return bridge.create_Result_double_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_double_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getDeviceInfo() -> bridge.Result_DeviceInfo_ {
    do {
      let __result = try self.__implementation.getDeviceInfo()
      let __resultCpp = __result
      return bridge.create_Result_DeviceInfo_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_DeviceInfo_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func delayedGreeting(name: std.string, delayMs: Double) -> bridge.Result_std__shared_ptr_Promise_std__string___ {
    do {
      let __result = try self.__implementation.delayedGreeting(name: String(name), delayMs: delayMs)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__string__ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__string__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__string__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(std.string(__result)) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__string___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__string___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func isEven(number: Double) -> bridge.Result_bool_ {
    do {
      let __result = try self.__implementation.isEven(number: number)
      let __resultCpp = __result
      return bridge.create_Result_bool_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_bool_(__exceptionPtr)
    }
  }
}
