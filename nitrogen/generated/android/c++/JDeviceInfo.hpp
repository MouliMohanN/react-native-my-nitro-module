///
/// JDeviceInfo.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "DeviceInfo.hpp"

#include <string>

namespace margelo::nitro::mynitromodule {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "DeviceInfo" and the the Kotlin data class "DeviceInfo".
   */
  struct JDeviceInfo final: public jni::JavaClass<JDeviceInfo> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/mynitromodule/DeviceInfo;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct DeviceInfo by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    DeviceInfo toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldPlatform = clazz->getField<jni::JString>("platform");
      jni::local_ref<jni::JString> platform = this->getFieldValue(fieldPlatform);
      static const auto fieldModel = clazz->getField<jni::JString>("model");
      jni::local_ref<jni::JString> model = this->getFieldValue(fieldModel);
      static const auto fieldVersion = clazz->getField<jni::JString>("version");
      jni::local_ref<jni::JString> version = this->getFieldValue(fieldVersion);
      return DeviceInfo(
        platform->toStdString(),
        model->toStdString(),
        version->toStdString()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JDeviceInfo::javaobject> fromCpp(const DeviceInfo& value) {
      return newInstance(
        jni::make_jstring(value.platform),
        jni::make_jstring(value.model),
        jni::make_jstring(value.version)
      );
    }
  };

} // namespace margelo::nitro::mynitromodule
